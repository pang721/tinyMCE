<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--
    自定义命名格式：
    %d：发生时间，%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2020-02-20 22:10:28,921
    %F：输出所在的类文件名
    %t：线程名称
    %p：日志级别
    %c：日志消息所在类名   {1.}表示精确度。若Logger名字为org.apache.commons.Foo，则输出o.a.c.Foo。
    %m：消息内容
    %M：输出所在函数名
    %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
    %l：执行的函数名(类名称:行号）com.core.LogHelper.aroundService(LogHelper.java:32)
    %n：换行
    %i：从1开始自增数字
    %-5level：输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
    “${sys:user.home}”是HOME目录 如:C:\Users\heave, 此处指定任意目录如：D:\logs
-->
<!--设置log4j2自身log级别为warn，每间隔30秒数自动检测配置是否发生修改，并重新配置  status用来指定log4j本身的打印日志的级别. monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s-->
<!--<configuration status="WARN" monitorInterval="60">-->
<Configuration status="DEBUG" >
    <Properties>
        <!-- 日志显示模板,显示内容的格式如下 -->
        <!-- [21:55:33:047] [INFO] - org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173) - Initializing Spring embedded WebApplicationContext -->
        <Property name="log_pattern" value="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
        <!-- 保存日志文件目录 -->
        <!--<Property name="file_path" value="${sys:user.home}/logs"/>-->
        <Property name="file_path" value="C:/D-data/log"/>
        <!-- 日志文件的最大容量，超过该值就进行备份 -->
        <Property name="file_max_size" value="30MB"/>
        <!-- 备份的文件夹名称 如下为：2020-02 -->
        <Property name="backup_folder" value="$${date:yyyy-MM}"/>
        <!-- 备份文件的后缀，日志文件超过file_max_size会备份到filePattern指定的目录下 -->
        <Property name="backup_file_suffix" value="-%d{yyyy-MM-dd}-%i.log"/>
    </Properties>

    <!--定义appender  附加程序-->
    <Appenders>

        <!--控制台的输出配置  name:指定Appender的名字. target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.-->
        <console name="Console" target="SYSTEM_OUT">
            <!-- 设置控制台只输出info及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
           <!-- <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <!--输出日志的格式 PatternLayout:输出格式，不设置默认为:%m%n.-->
            <PatternLayout pattern="${log_pattern}"/>
        </console>

        <RollingFile name="RollingFile" fileName="logs/app.log"
                     filePattern="logs/app-%d{yyyy-MM-dd}.log">
            <PatternLayout>
                <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>
            </PatternLayout>
            <Policies>
                <!-- 每 5s 翻滚一次 -->
                <!--<CronTriggeringPolicy schedule="0/5 * * * * ?" />-->

                <!--
                    filePattern中最具体的时间单位是 秒。
                    这里用 TimeBasedTriggeringPolicy 替换 CronTriggeringPolicy
                    注意：modulate属性是指从启动时间开始算5秒，还是从0秒开始算5秒，运行一下就明白了。
                    modulate: true(默认值) // 会从启动时间开始算 5秒
                    modulate: false // 从 0秒开始算
                    <TimeBasedTriggeringPolicy interval="5" modulate="true"/>
                -->
                <!-- 时间策略  默认的size是1，结合起来就是每1秒钟生成一个新文件  interval，integer型，指定两次封存动作之间的时间间隔。这个配置需要和filePattern结合使用，filePattern日期格式精确到哪一位，interval也精确到哪一个单位。注意filePattern中配置的文件重命名规则是%d{yyyy-MM-dd HH-mm-ss}-%i，最小的时间粒度是ss，即秒钟。-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <!--大小策略-->
                <SizeBasedTriggeringPolicy size="20MB"/>
            </Policies>
            <!--保存日志文件个数  用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。-->
            <DefaultRolloverStrategy max="3"/>
        </RollingFile>

    </Appenders>

    <Loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"></logger>
        <logger name="org.mybatis" level="INFO"></logger>
        <Root level="DEBUG">
            <AppenderRef ref="Console" />
            <AppenderRef ref="RollingFile"/>
        </Root>
    </Loggers>

</Configuration>